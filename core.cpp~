#include "core.h"
#include <iostream>
#include <string>

#include <vector>
#include <math.h>
#include <algorithm>


std::string Core::getOutput(){
	return this -> currentOutput;
}

void Core::flush(){
	this -> currentOutput = "";
}

bool Core::isExpression(std::string testy){
	if(testy.find("+") != std::string::npos){
		return true;
	}
	else{
		return false;
	}
}

bool Core::isAssignment(std::string testy){
	if(testy.find("=") != std::string::npos){
		return true;
	}
	else{
		return false;
	}
}

std::string Core::evalExpression(std::string expression){
	ExpressionParser<int> parser;
	return this -> to_string(parser.eval(expression));
}

std::string Core::to_string(int number){
	std::stringstream ss;
    	ss << number;
    	return ss.str();	
}

void Core::feed(std::string ss){

	/* Set the current instruction */
	this -> currentInstruction = ss;
	
	/* Check what phase */

	
	
	/* Clear the output buffer */
	flush();
}

std::string Core::getVarType(std::string name){
	int i;
	for(i = 0; i < variableNames.size(); i++){
		if(name == variableNames[i]){
			break;
		}
	}
	return variableTypes[i];
}

std::string Core::getVarValue(std::string name){
	int i;
	for(i = 0; i < variableNames.size(); i++){
		if(name == variableNames[i]){
			break;
		}
	}
	return variableValues[i];
}

bool Core::varExists(std::string name){
	int i;
	for(i = 0; i < variableNames.size(); i++){
		if(name == variableNames[i]){
			break;
		}
	}
	if(i != variableNames.size()){
		return true;
	}else{
		return false;
	}
}

void Core::createVar(std::string name, std::string type, std::string value){
	variableNames.push_back(name);
	variableTypes.push_back(type);
	variableValues.push_back(value);
}
